# n 个顶点的无向图，顶点i 的完美度 Ci
# 一开始一个顶点u放棋子
# 通过邻接边移动到另一个顶点（v），并删除边uv
# 游戏完美度 = Cu*Cv
#无法移动算输 = 移入一步+删除后新的点无任何边
"""
图是无向完全图，每一个点与其他点都有相连
能赢的人 = 优化最小回合数，快速到删完后无边的点，次优化最大化完美度
不能赢的人 = 优化最大回合数，次优化最大完美度

输入：
n 顶点个数
C1 C2 C3 .... 第i个整数Ci表示第i个顶点的完美度 
"""

"""
1个顶点（0条边）
一开始就输了，游戏完美度 = 0
2个顶点（1条边）
移动一次，完美度 = c1 * c2
3个顶点（3条边）
移动两次，完美度 = 3条边的值大的那两个，


等于是带权图的算法，求最大带权边，每一个边的权重是两个顶点的完美度乘积
"""
import sys
if __name__ == "__main__":
    # 读取第一行的n
    n = int(sys.stdin.readline().strip())
    ans = 0
    for i in range(n):
        # 读取每一行
        line = sys.stdin.readline().strip()
        # 把每一行的数字分隔后转化成int列表
        values = list(map(int, line.split()))
        for v in values:
            ans += v
    print(ans)