"""
爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：

爱丽丝以 0 分开始，并在她的得分少于 K 分时抽取数字。 抽取时，她从 [1, W] 的范围中随机获得一个整数作为分数进行累计，其中 W 是整数。 每次抽取都是独立的，其结果具有相同的概率。

当爱丽丝获得不少于 K 分时，她就停止抽取数字。 爱丽丝的分数不超过 N 的概率是多少？
例 1：

输入：N = 10, K = 1, W = 10
输出：1.00000
说明：爱丽丝得到一张卡，然后停止。
示例 2：

输入：N = 6, K = 1, W = 10
输出：0.60000
说明：爱丽丝得到一张卡，然后停止。
在 W = 10 的 6 种可能下，她的得分不超过 N = 6 分。
示例 3：

输入：N = 21, K = 17, W = 10
输出：0.73278

0 <= K <= N <= 10000
1 <= W <= 10000
如果答案与正确答案的误差不超过 10^-5，则该答案将被视为正确答案通过。
此问题的判断限制时间已经减少。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/new-21-game
"""


"""
思路分析
1.开始为0，每次从[1,W]中抽，抽到K截止，算小于等于N的概率。
2.假设第一次抽了x，则现在的值变成x。
题目变为
3.开始为x，每次从[1,w]中抽，抽到k-x截止，算小于等于N的概率。

所以应该是可以递归，也可以写成动态规划
"""

class Solution:
    def new21Game(self, N: int, K: int, W: int) -> float:
        # 开始为0，每次从[1,W]中抽，抽到K截止，算小于等于N的概率。
        """
        当K <= x <= min(N,K+W-1) 时， dp[x] = 1
        当     x >= min(N,K+W-1) 时,  dp[x] = 0
                          K+W-1 代表最后一次抽之前为 K-1，抽到了W
        当0 <= x <= K 时, 
            dp[x] =  sum(dp[x+1],dp[x+2]…………dp[x+w])  /  W       概率均分
        超时，需要优化计算方法，采用相邻差分计算,其 0<= x < K-1 
            dp[x] - dp[x+1] =  (dp[x+1] - dp[x+W+1] ) / W
            ==> dp[x] = dp[x+1] + (dp[x+1] - dp[x+w+1])  / W
        其中，X=K-1时，
            dp[K-1] = dp[K] + dp[K+1] …… dp[K+W-1] / W
            因为最开始写的， x >= min(N,K+W-1) 时,  dp[x] = 0
            所以上述方程 = (min(N,K+W-1) - K + 1) / W
                        = min(N-K+1,W) / W
        """
        if K == 0:
            return 1.0
        #初始化一个大小为K+W-1的数组/list,方便记录每一个dp的值，而且 >min(N,K+W-1) 的都直接变0，不用改变了。
        dp = [0.0] * (K + W)
        # K <= X <= min(N,K+W-1)
        for i in range(K,min(N,K + W - 1) + 1):
            dp[i] = 1.0
        # X = K - 1    
        dp[K - 1] = float(min(N - K + 1,W)) / W
        # 0 <= X <= k-2
        for i in range(K - 2 , -1, -1):
            dp[i] = dp[i + 1] + (dp[i+1] - dp[i+W+1]) / W
        return dp[0]

